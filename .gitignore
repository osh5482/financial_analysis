# 바이트 컴파일 / 최적화 / DLL 파일
__pycache__/
*.py[cod]
*$py.class

# C 확장
*.so

# 배포 / 패키징
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  보통 이러한 파일들은 PyInstaller가 exe를 빌드하기 전에 
#  파이썬 스크립트에 의해 템플릿에서 작성되어 날짜/기타 정보를 주입합니다.
*.manifest
*.spec

# 설치 로그
pip-log.txt
pip-delete-this-directory.txt

# 단위 테스트 / 커버리지 리포트
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 번역
*.mo
*.pot

# Django 관련:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask 관련:
instance/
.webassets-cache

# Scrapy 관련:
.scrapy

# Sphinx 문서
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   라이브러리나 패키지의 경우, 이 파일들을 무시하는 것이 좋습니다. 
#   코드가 여러 환경에서 실행되도록 의도되었기 때문입니다. 그렇지 않으면 체크인하세요:
# .python-version

# pipenv
#   pypa/pipenv#598에 따르면, 버전 관리에 Pipfile.lock을 포함하는 것이 권장됩니다.
#   하지만 협업 시 플랫폼별 의존성이나 크로스 플랫폼 지원이 없는 의존성이 있는 경우,
#   pipenv는 작동하지 않는 의존성을 설치하거나 필요한 모든 의존성을 설치하지 않을 수 있습니다.
#Pipfile.lock

# UV
#   Pipfile.lock과 유사하게, 일반적으로 버전 관리에 uv.lock을 포함하는 것이 권장됩니다.
#   이는 특히 바이너리 패키지의 재현성을 보장하기 위해 권장되며, 라이브러리보다는 
#   더 일반적으로 무시됩니다.
#uv.lock

# poetry
#   Pipfile.lock과 유사하게, 일반적으로 버전 관리에 poetry.lock을 포함하는 것이 권장됩니다.
#   이는 특히 바이너리 패키지의 재현성을 보장하기 위해 권장되며, 라이브러리보다는 
#   더 일반적으로 무시됩니다.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Pipfile.lock과 유사하게, 일반적으로 버전 관리에 pdm.lock을 포함하는 것이 권장됩니다.
#pdm.lock
#   pdm은 프로젝트 전체 설정을 .pdm.toml에 저장하지만, 버전 관리에 포함하지 않는 것이 권장됩니다.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; github.com/David-OConnor/pyflow 및 github.com/pdm-project/pdm 등에서 사용
__pypackages__/

# Celery 관련
celerybeat-schedule
celerybeat.pid

# SageMath 파싱된 파일
*.sage.py

# 환경 변수
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder 프로젝트 설정
.spyderproject
.spyproject

# Rope 프로젝트 설정
.ropeproject

# mkdocs 문서
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre 타입 검사기
.pyre/

# pytype 정적 타입 분석기
.pytype/

# Cython 디버그 심볼
cython_debug/

# PyCharm
#  JetBrains용 템플릿은 별도의 JetBrains.gitignore에서 관리됩니다.
#  https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore에서 찾을 수 있으며
#  글로벌 gitignore에 추가하거나 이 파일에 병합할 수 있습니다. 보다 확실한 방법을 원한다면
#  (권장하지 않음) 다음을 주석 해제하여 전체 idea 폴더를 무시할 수 있습니다.
#.idea/

# Abstra
# Abstra는 AI 기반 프로세스 자동화 프레임워크입니다.
# 사용자 인증 정보, 로컬 상태 및 설정이 포함된 디렉토리를 무시합니다.
# 자세한 내용은 https://abstra.io/docs에서 확인하세요
.abstra/

# Visual Studio Code
#  Visual Studio Code용 템플릿은 별도의 VisualStudioCode.gitignore에서 관리됩니다.
#  https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore에서 찾을 수 있으며
#  글로벌 gitignore에 추가하거나 이 파일에 병합할 수 있습니다. 하지만 원한다면
#  다음을 주석 해제하여 전체 vscode 폴더를 무시할 수 있습니다
# .vscode/

# Ruff 관련:
.ruff_cache/

# PyPI 설정 파일
.pypirc

# Cursor
#  Cursor는 AI 기반 코드 에디터입니다. `.cursorignore`는 자동완성 및 코드 분석과 같은 
#  AI 기능에서 제외할 파일/디렉토리를 지정합니다. 민감한 데이터에 권장됩니다.
#  https://docs.cursor.com/context/ignore-files 참조
.cursorignore
.cursorindexingignore

# 로그 파일들 (프로젝트별 추가)
# 모든 로그 파일과 로그 디렉토리 제외
logs/
*.log
*.log.*
*.out
*.err